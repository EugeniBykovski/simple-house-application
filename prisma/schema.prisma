datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?         
  username      String          @unique         
  surname       String?         
  email         String?         @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  createdAt     DateTime @default(now())
  voucher       Boolean         @default(false) 
  voucherCode   String?  
  checks        Check[] 
  paymentDetails  PaymentDetails? 
  completedOnboarding Boolean   @default(false)
  accounts      Account[]
  messages      Message[]
  sessions      Session[]
  createdWorkspaces Workspace[] @relation("CreatedBy")
  subscriptions Subscription[]
  isOnline      Boolean         @default(false)
  apartmentId   String?   
  apartment     Apartment?  @relation(fields: [apartmentId], references: [id])
  userApartments UserApartment[]
  contractCode  String?

  conversationIds  String[]  @default(cuid())
  conversations UserConversations[]

  seenMessageIds  String[]  @default(cuid())
  seenMessages  MessageSeenBy[]

  PomodoroSettings PomodoroSettings[]
  AdvertMessage AdvertMessage[]
  calendarEvent CalendarEvent[]
}

model UserApartment {
  userId      String
  apartmentId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)

  @@id([userId, apartmentId])
}

model Conversation {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messages      Message[]
  participants  UserConversations[]
}

model Message {
  id            String   @id @default(cuid())
  body          String?
  image         String?
  createdAt     DateTime @default(now())

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId       String
  sender         User @relation(fields: [senderId], references: [id], onDelete: Cascade)

  seenBy         MessageSeenBy[]
}

model UserConversations {
  userId         String
  conversationId String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])
}

model MessageSeenBy {
  messageId String
  userId    String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([messageId, userId])
}

model Account {
  id                String @id @default(cuid())
  userId            String @unique
  type              String
  provider          String
  providerAccountId String @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime
 
  @@unique([identifier, token])
}

model House {
  id        String      @id @default(cuid())
  street    String
  houseNumber String
  createdBy   String?
  entrances Entrance[]

  @@unique([street, houseNumber])
}

model Entrance {
  id             String       @id @default(cuid())
  houseId        String
  entranceNumber String
  createdBy      String?
  house          House         @relation(fields: [houseId], references: [id], onDelete: Cascade)
  apartments     Apartment[]

  @@unique([houseId, entranceNumber])
}

model Apartment {
  id             String       @id @default(cuid())
  entranceId     String
  apartmentNumber String
  floor          String? 
  createdBy      String?
  entrance       Entrance      @relation(fields: [entranceId], references: [id], onDelete: Cascade)
  userApartments UserApartment[]

  @@unique([entranceId, apartmentNumber])
  calendarEvent CalendarEvent[]
  User User[]
}

model Workspace {
  id String @id @default(cuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId String?
  Creator User? @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  subscribers Subscription[]
  image String?
  color CustomColors @default(BLUE)

  @@index([creatorId])
}

model Subscription {
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  workspace Workspace @relation(fields: [workspaceId],references: [id], onDelete: Cascade)
  workspaceId String
  userRole UserPermission @default(READ_ONLY)

  @@id([userId, workspaceId])
  @@index([workspaceId])
  @@index([userId])
}

model Check {
  id        String   @id @default(cuid())
  userId    String
  status    String
  amount    Float
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentDetails {
  id        String   @id @default(cuid())
  userId    String @unique
  totalAmount Float
  lastPaymentDate DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdvertMessage {
  id        String   @id @default(cuid())
  userId    String
  content   String
  phone     String?
  voucherCode String?
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("NOW() + INTERVAL '1 day'"))
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserPermission {
  ADMIN
  CAN_EDIT
  READ_ONLY
  OWNER
}

enum NotifyType {
  NEW_USER_IN_WORKSPACE
  USER_LEFT_WORKSPACE
  NEW_TASK
  NEW_MIND_MAP
  NEW_ROLE
  NEW_ASSIGNMENT_TASK
  NEW_ASSIGNMENT_MIND_MAP
}

enum PomodoroSoundEffect {
  ANALOG
  BIRD
  CHURCH_BELL
  DIGITAL
  FANCY
  BELL
}

model PomodoroSettings {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  workDuration Int @default(25)
  shortBreakDuration Int @default(5)
  longBreakDuration Int @default(15)
  longBreakInterval Int @default(2)
  rounds Int @default(3)
  soundEffect PomodoroSoundEffect @default(BELL)
  soundEffectVolume Float @default(0.5)
}

enum CustomColors {
  PURPLE
  RED
  GREEN
  BLUE
  PINK
  YELLOW
  ORANGE
  CYAN
  LIME
  EMERALD
  INDIGO
  FUCHSIA
}

model CalendarEvent {
  id          String   @id @default(cuid())
  date        DateTime
  title       String
  description String
  userId      String
  apartmentId String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  apartment   Apartment? @relation(fields: [apartmentId], references: [id], onDelete: Cascade)

  @@index([userId])
}